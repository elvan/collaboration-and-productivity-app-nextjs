// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  workspaces    WorkspaceMember[]
  tasks         Task[]
  projects      Project[]    @relation("ProjectMembers")
  ownedProjects Project[]    @relation("ProjectOwner")
  sentInvitations ProjectInvitation[] @relation("SentInvitations")
  receivedInvitations ProjectInvitation[] @relation("ReceivedInvitations")
  notifications Notification[]
  notificationPreferences NotificationPreference[]
  pushSubscriptions PushSubscription[]
  notificationRateLimits NotificationRateLimit[]
  createdTemplates NotificationTemplate[] @relation("CreatedTemplates")
  updatedTemplates NotificationTemplate[] @relation("UpdatedTemplates")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     WorkspaceMember[]
  projects    Project[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  role        String    @default("member")
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workspaceId])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active")
  priority    String    @default("medium")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  ownerId     String
  owner       User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     User[]    @relation("ProjectMembers")
  tasks       Task[]
  invitations ProjectInvitation[]
  activities  Activity[]
  customFields CustomField[]

  @@index([workspaceId])
  @@index([ownerId])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String
  priority    String
  startDate   DateTime?
  dueDate     DateTime?
  assigneeId  String?
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignee    User?    @relation(fields: [assigneeId], references: [id])
  project     Project  @relation(fields: [projectId], references: [id])
  labels      Label[]
  dependencies     TaskDependency[] @relation("DependentTask")
  dependentTasks   TaskDependency[] @relation("Dependency")
  customFields CustomFieldValue[]
  comments     Comment[]
  mentions     Mention[]
  attachments  Attachment[]

  @@index([projectId])
  @@index([assigneeId])
}

model TaskDependency {
  id              String @id @default(cuid())
  dependentTaskId String
  dependencyId    String
  createdAt       DateTime @default(now())

  // Relations
  dependentTask   Task @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  dependency      Task @relation("Dependency", fields: [dependencyId], references: [id], onDelete: Cascade)

  @@unique([dependentTaskId, dependencyId])
  @@index([dependentTaskId])
  @@index([dependencyId])
}

model ProjectInvitation {
  id            String   @id @default(cuid())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  invitedById   String
  invitedBy     User    @relation("SentInvitations", fields: [invitedById], references: [id])
  invitedUserId String
  invitedUser   User    @relation("ReceivedInvitations", fields: [invitedUserId], references: [id])
  status        String   @default("pending") // pending, accepted, declined
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([projectId])
  @@index([invitedById])
  @@index([invitedUserId])
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // member_added, member_removed, task_created, task_completed, etc.
  data        Json     // Additional data specific to the activity type
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@index([projectId])
  @@index([userId])
}

model Notification {
  id          String    @id @default(cuid())
  type        String    // "activity", "mention", "system", etc.
  category    String    // "project", "task", "member", "system"
  priority    String    @default("normal") // "high", "normal", "low"
  groupId     String?   // For grouping related notifications
  groupOrder  Int?      // Order within group
  title       String
  message     String
  read        Boolean   @default(false)
  dismissed   Boolean   @default(false)
  metadata    Json?     // Additional context
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  activityId  String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity    Activity? @relation(fields: [activityId], references: [id], onDelete: SetNull)
  template    NotificationTemplate? @relation(fields: [id], references: [id])

  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([groupId])
  @@index([createdAt])
}

model NotificationDelivery {
  id            String    @id @default(cuid())
  notificationId String
  userId        String
  channel       String    // "app", "email", "push"
  status        String    // "sent", "delivered", "failed", "clicked", "dismissed"
  error         String?   // Error message if failed
  metadata      Json?     // Additional context (e.g., device info, email client)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  notification  Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([notificationId])
  @@index([userId])
  @@index([channel])
  @@index([status])
  @@index([createdAt])
}

model NotificationPreference {
  id            String   @id @default(cuid())
  userId        String
  channel       String   // email, in-app, mobile, etc.
  type          String   // notification type (e.g., mentions, updates, etc.)
  enabled       Boolean  @default(true)
  schedule      Json?    // Time windows for receiving notifications
  frequency     String?  // immediate, daily_digest, weekly_digest
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, channel, type])
  @@index([userId])
  @@index([channel])
  @@index([type])
}

model NotificationDigest {
  id            String   @id @default(cuid())
  userId        String
  channel       String
  type          String
  notifications Json     // Array of notification IDs
  status        String   // pending, sent, failed
  scheduledFor  DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([channel])
  @@index([type])
  @@index([status])
  @@index([scheduledFor])
}

model NotificationMetric {
  id          String   @id @default(cuid())
  userId      String
  projectId   String?
  type        String   // "notification", "email", "digest"
  action      String   // "sent", "read", "clicked", "dismissed"
  timestamp   DateTime @default(now())
  metadata    Json?    // Additional context like notification type, email type, etc.
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([projectId])
  @@index([timestamp])
}

model PushSubscription {
  id        String   @id @default(cuid())
  token     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token, userId])
  @@index([userId])
  @@index([token])
}

model NotificationRateLimit {
  id            String    @id @default(cuid())
  userId        String
  channel       String    // "app", "email", "push"
  templateType  String?   // Optional: specific template type to rate limit
  category      String?   // Optional: specific category to rate limit
  maxPerMinute  Int      @default(2)
  maxPerHour    Int      @default(30)
  maxPerDay     Int      @default(100)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel, templateType, category])
  @@index([userId])
  @@index([channel])
}

model NotificationThrottle {
  id            String    @id @default(cuid())
  userId        String
  channel       String
  templateType  String?
  category      String?
  count         Int      @default(0)
  windowStart   DateTime
  windowEnd     DateTime
  windowType    String   // "minute", "hour", "day"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([channel])
  @@index([windowStart])
  @@index([windowEnd])
}

model NotificationBatch {
  id            String    @id @default(cuid())
  userId        String
  templateType  String
  category      String
  groupId       String?
  priority      String    @default("normal")
  status        String    @default("pending") // pending, sent, failed
  count         Int       @default(0)
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  scheduledFor  DateTime?
  sentAt        DateTime?
  error         String?
  
  notifications Notification[]
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateType])
  @@index([category])
  @@index([status])
  @@index([scheduledFor])
  @@index([createdAt])
}

model NotificationBatchingRule {
  id            String    @id @default(cuid())
  userId        String
  templateType  String?   // Optional: specific template type to batch
  category      String?   // Optional: specific category to batch
  enabled       Boolean   @default(true)
  batchWindow   Int       @default(300)  // Time window in seconds to batch notifications
  minBatchSize  Int       @default(2)    // Minimum number of notifications to trigger a batch
  maxBatchSize  Int       @default(10)   // Maximum number of notifications in a batch
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateType, category])
  @@index([userId])
  @@index([templateType])
  @@index([category])
}

model NotificationFilter {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String?
  isDefault     Boolean   @default(false)
  conditions    Json      // {type, category, priority, read, dismissed, dateRange, search, etc}
  sortBy        String    @default("createdAt")
  sortOrder     String    @default("desc")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@index([createdAt])
}

model NotificationAnalytics {
  id            String   @id @default(cuid())
  userId        String
  notificationId String?
  batchId       String?
  event         String   // sent, delivered, read, clicked, dismissed
  channel       String   // app, email, push
  metadata      Json?    // Additional event data
  createdAt     DateTime @default(now())
  
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  notification  Notification? @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  batch         NotificationBatch? @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([notificationId])
  @@index([batchId])
  @@index([event])
  @@index([channel])
  @@index([createdAt])
}

model NotificationStats {
  id            String   @id @default(cuid())
  userId        String
  period        String   // daily, weekly, monthly
  date          DateTime
  channel       String   // app, email, push
  total         Int      @default(0)
  read          Int      @default(0)
  clicked       Int      @default(0)
  dismissed     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, date, channel])
  @@index([userId])
  @@index([period])
  @@index([date])
  @@index([channel])
}

model BulkAction {
  id            String   @id @default(cuid())
  userId        String
  type          String   // markAsRead, markAsUnread, dismiss, delete
  status        String   // pending, processing, completed, failed
  total         Int      @default(0)
  processed     Int      @default(0)
  failed        Int      @default(0)
  filter        Json?    // Filter conditions for the bulk action
  error         String?  // Error message if failed
  createdAt     DateTime @default(now())
  completedAt   DateTime?
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model NotificationTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String?
  type          String   // email, push, app
  title         String
  body          String
  metadata      Json?    // Additional template data (icons, actions, etc)
  variables     Json?    // List of variables used in the template
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   String
  updatedById   String?
  
  createdBy     User     @relation("CreatedTemplates", fields: [createdById], references: [id])
  updatedBy     User?    @relation("UpdatedTemplates", fields: [updatedById], references: [id])
  
  versions      NotificationTemplateVersion[]
  notifications Notification[]
  analytics     TemplateAnalytics[]
  performance   TemplatePerformance[]
  campaigns     Campaign[]
}

model NotificationTemplateVersion {
  id            String   @id @default(cuid())
  templateId    String
  version       Int
  title         String
  body          String
  metadata      Json?
  variables     Json?
  createdAt     DateTime @default(now())
  createdById   String
  
  template      NotificationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdBy     User                @relation(fields: [createdById], references: [id])

  @@unique([templateId, version])
  @@index([templateId])
  @@index([createdById])
}

model ABTest {
  id            String   @id @default(cuid())
  name          String
  description   String?
  templateId    String
  variants      Json     // Array of template variants
  startDate     DateTime
  endDate       DateTime?
  status        String   // draft, active, completed, stopped
  winningVariant String?
  metrics       Json?    // Test metrics and results
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   String
  
  template      NotificationTemplate @relation(fields: [templateId], references: [id])
  createdBy     User                @relation(fields: [createdById], references: [id])

  @@index([templateId])
  @@index([createdById])
  @@index([status])
}

model ABTestEvent {
  id            String   @id @default(cuid())
  testId        String
  variantId     String
  userId        String
  event         String   // sent, delivered, read, clicked
  metadata      Json?
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@index([variantId])
  @@index([userId])
  @@index([event])
  @@index([createdAt])
}

model ScheduledNotification {
  id            String   @id @default(cuid())
  templateId    String
  recipients    Json     // Array of user IDs or criteria
  schedule      Json     // Schedule configuration (one-time, recurring)
  data          Json?    // Template data/variables
  status        String   // pending, processing, completed, failed, cancelled
  lastRunAt     DateTime?
  nextRunAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   String
  
  template      NotificationTemplate @relation(fields: [templateId], references: [id])
  createdBy     User                @relation(fields: [createdById], references: [id])

  @@index([templateId])
  @@index([createdById])
  @@index([status])
  @@index([nextRunAt])
}

model RecurringSchedule {
  id            String   @id @default(cuid())
  type          String   // daily, weekly, monthly
  time          String   // HH:mm format
  days          Json?    // Array of days for weekly/monthly
  timezone      String   // User's timezone
  startDate     DateTime
  endDate       DateTime?
  lastRunAt     DateTime?
  nextRunAt     DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([type])
  @@index([isActive])
  @@index([nextRunAt])
}

model TemplateAnalytics {
  id            String   @id @default(cuid())
  templateId    String
  event         String   // sent, delivered, read, clicked, converted
  metadata      Json?    // Additional event data
  userId        String?  // User who triggered the event
  timestamp     DateTime @default(now())

  template      NotificationTemplate @relation(fields: [templateId], references: [id])
  user          User?               @relation(fields: [userId], references: [id])

  @@index([templateId])
  @@index([userId])
  @@index([event])
  @@index([timestamp])
}

model TemplatePerformance {
  id                String   @id @default(cuid())
  templateId        String
  period            String   // daily, weekly, monthly
  startDate         DateTime
  endDate           DateTime
  sentCount         Int      @default(0)
  deliveredCount    Int      @default(0)
  readCount         Int      @default(0)
  clickCount        Int      @default(0)
  conversionCount   Int      @default(0)
  deliveryRate      Float    @default(0)
  readRate          Float    @default(0)
  clickRate         Float    @default(0)
  conversionRate    Float    @default(0)
  averageReadTime   Float?   // In seconds
  metadata          Json?    // Additional metrics

  template          NotificationTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, period, startDate])
  @@index([templateId])
  @@index([period])
  @@index([startDate])
  @@index([endDate])
}

model Campaign {
  id            String   @id @default(cuid())
  name          String
  description   String?
  status        String   // draft, scheduled, active, paused, completed
  templateId    String
  audience      Json     // Target audience criteria
  schedule      Json     // Campaign schedule configuration
  metadata      Json?    // Additional campaign settings
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   String

  template      NotificationTemplate @relation(fields: [templateId], references: [id])
  createdBy     User                @relation(fields: [createdById], references: [id])
  metrics       CampaignMetrics?
  events        CampaignEvent[]

  @@index([templateId])
  @@index([createdById])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model CampaignMetrics {
  id                String   @id @default(cuid())
  campaignId        String   @unique
  targetAudience    Int      @default(0)
  sentCount         Int      @default(0)
  deliveredCount    Int      @default(0)
  readCount         Int      @default(0)
  clickCount        Int      @default(0)
  conversionCount   Int      @default(0)
  bounceCount       Int      @default(0)
  optOutCount       Int      @default(0)
  deliveryRate      Float    @default(0)
  readRate          Float    @default(0)
  clickRate         Float    @default(0)
  conversionRate    Float    @default(0)
  bounceRate        Float    @default(0)
  optOutRate        Float    @default(0)
  lastUpdated       DateTime @default(now())

  campaign          Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model CampaignEvent {
  id            String   @id @default(cuid())
  campaignId    String
  userId        String?
  event         String   // sent, delivered, read, clicked, converted, bounced, optedOut
  metadata      Json?    // Additional event data
  timestamp     DateTime @default(now())

  campaign      Campaign @relation(fields: [campaignId], references: [id])
  user          User?    @relation(fields: [userId], references: [id])

  @@index([campaignId])
  @@index([userId])
  @@index([event])
  @@index([timestamp])
}

model Webhook {
  id            String   @id @default(cuid())
  name          String
  url           String
  secret        String
  events        String[] // Array of event types to trigger webhook
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   String
  workspaceId   String

  createdBy     User      @relation(fields: [createdById], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id])
  deliveries    WebhookDelivery[]

  @@index([workspaceId])
  @@index([createdById])
  @@index([isActive])
}

model WebhookDelivery {
  id            String   @id @default(cuid())
  webhookId     String
  event         String
  payload       Json
  response      Json?
  statusCode    Int?
  error         String?
  attempts      Int      @default(0)
  succeededAt   DateTime?
  createdAt     DateTime @default(now())

  webhook       Webhook  @relation(fields: [webhookId], references: [id])

  @@index([webhookId])
  @@index([event])
  @@index([succeededAt])
}

model Integration {
  id            String   @id @default(cuid())
  type          String   // e.g., "github", "slack", "jira"
  name          String
  config        Json
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   String
  workspaceId   String

  createdBy     User      @relation(fields: [createdById], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([createdById])
  @@index([type])
  @@index([isActive])
}

model ActivityLog {
  id            String   @id @default(cuid())
  type          String   // e.g., "task.created", "comment.added"
  action        String   // e.g., "created", "updated", "deleted"
  entityType    String   // e.g., "task", "comment", "document"
  entityId      String
  metadata      Json?
  createdAt     DateTime @default(now())
  userId        String
  workspaceId   String

  user          User      @relation(fields: [userId], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([userId])
  @@index([type])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
}

model Audit {
  id            String   @id @default(cuid())
  type          String   // e.g., "security", "data", "access"
  action        String   // e.g., "login", "export", "permission_change"
  description   String
  metadata      Json?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())
  userId        String?
  workspaceId   String

  user          User?     @relation(fields: [userId], references: [id])
  workspace     Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([userId])
  @@index([type])
  @@index([action])
  @@index([createdAt])
}

model WorkspaceAnalytics {
  id                String   @id @default(cuid())
  workspaceId       String   @unique
  activeUsers       Int      @default(0)
  taskCount         Int      @default(0)
  completedTasks    Int      @default(0)
  documentCount     Int      @default(0)
  commentCount      Int      @default(0)
  storageUsed       BigInt   @default(0) // in bytes
  lastUpdated       DateTime @default(now())

  workspace         Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}

model CustomField {
  id          String   @id @default(cuid())
  name        String
  type        String   // text, number, date, select, multiselect, user
  options     Json?    // For select/multiselect fields
  required    Boolean  @default(false)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  values      CustomFieldValue[]

  @@unique([name, projectId])
  @@index([projectId])
}

model CustomFieldValue {
  id            String   @id @default(cuid())
  value         Json
  taskId        String
  customFieldId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  task         Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  customField  CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([taskId, customFieldId])
  @@index([taskId])
  @@index([customFieldId])
}

model Workflow {
  id          String   @id @default(cuid())
  name        String
  projectId   String
  statuses    Json     // Array of status objects with transitions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  automations WorkflowAutomation[]

  @@unique([name, projectId])
  @@index([projectId])
}

model WorkflowAutomation {
  id          String   @id @default(cuid())
  name        String
  workflowId  String
  trigger     Json     // Trigger conditions
  actions     Json     // Actions to perform
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id])
  parent    Comment? @relation("CommentThread", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentThread")
  mentions  Mention[]

  @@index([taskId])
  @@index([authorId])
  @@index([parentId])
}

model Mention {
  id        String   @id @default(cuid())
  taskId    String
  commentId String?
  userId    String
  createdAt DateTime @default(now())

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([commentId])
  @@index([userId])
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  taskId    String
  uploaderId String
  createdAt DateTime @default(now())

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader  User     @relation(fields: [uploaderId], references: [id])

  @@index([taskId])
  @@index([uploaderId])
}
