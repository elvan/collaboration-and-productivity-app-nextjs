// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth relations
  accounts Account[]
  sessions Session[]

  // Workspace relations
  workspaces WorkspaceMember[]

  // Task relations
  assignedTasks Task[] @relation("TaskAssignee")
  createdTasks  Task[] @relation("TaskCreator")

  // Project relations
  projects            Project[]           @relation("ProjectMembers")
  ownedProjects       Project[]           @relation("ProjectOwner")
  sentInvitations     ProjectInvitation[] @relation("SentInvitations")
  receivedInvitations ProjectInvitation[] @relation("ReceivedInvitations")

  // Activity & Content relations
  activities  Activity[]
  timeEntries TimeEntry[]
  comments    Comment[]
  mentions    Mention[]
  attachments Attachment[] @relation("Uploads")

  // Notification relations
  notifications           Notification[]
  notificationPreferences NotificationPreference[]
  pushSubscriptions       PushSubscription[]
  notificationRateLimits  NotificationRateLimit[]
  createdTemplates        NotificationTemplate[]     @relation("CreatedTemplates")
  updatedTemplates        NotificationTemplate[]     @relation("UpdatedTemplates")
  notificationAnalytics   NotificationAnalytics[]
  notificationStats       NotificationStats[]
  notificationBatches     NotificationBatch[]
  batchingRules           NotificationBatchingRule[]
  notificationFilters     NotificationFilter[]

  // Calendar & Email
  calendarIntegrations CalendarIntegration[]
  emailLogs            EmailLog[]            @relation("ReceivedEmails")

  // Audit & Analytics
  auditLogs   AuditLog[]
  bulkActions BulkAction[]

  // Template & Campaign relations
  templateVersions       NotificationTemplateVersion[] @relation("VersionCreator")
  abTests                ABTest[]                      @relation("TestCreator")
  abTestEvents           ABTestEvent[]
  scheduledNotifications ScheduledNotification[]       @relation("NotificationCreator")
  templateAnalytics      TemplateAnalytics[]
  campaigns              Campaign[]                    @relation("CampaignCreator")
  campaignEvents         CampaignEvent[]

  ABTest ABTest[]

  NotificationTemplateVersion NotificationTemplateVersion[]

  ScheduledNotification ScheduledNotification[]

  Campaign Campaign[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  members     WorkspaceMember[]
  projects    Project[]

  WorkspaceAnalytics WorkspaceAnalytics[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  role        String    @default("member")
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workspaceId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner     User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members   User[]    @relation("ProjectMembers")

  // Task Management
  tasks          Task[]
  labels         Label[]
  taskTypes      TaskType[]
  taskStatuses   TaskStatus[]
  taskPriorities TaskPriority[]
  taskTemplates  TaskTemplate[]
  taskLists      TaskList[]
  taskTags       TaskTag[]

  // Workflow & Automation
  workflows           Workflow[]
  priorityRules       PriorityRule[]
  workflowAutomations WorkflowAutomation[]

  // Project Features
  customFields   CustomField[]
  webhooks       Webhook[]
  emailTemplates EmailTemplate[]

  // Activity & Notifications
  activities    Activity[]
  notifications Notification[]
  invitations   ProjectInvitation[]

  // Integrations
  integrations Integration[]

  @@index([ownerId])
  @@index([workspaceId])
}

model PriorityRule {
  id         String   @id @default(cuid())
  projectId  String
  conditions Json // Serialized rule conditions
  enabled    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model WorkflowAutomation {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String
  triggerType String // on_status_change, on_priority_change, etc.
  conditions  Json? // Conditions that must be met
  actions     Json // Actions to perform
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String

  @@index([projectId])
}

model Activity {
  id        String   @id @default(cuid())
  type      String // task_created, comment_added, etc.
  projectId String?
  taskId    String?
  userId    String
  metadata  Json?
  createdAt DateTime @default(now())

  project       Project?       @relation(fields: [projectId], references: [id], onDelete: SetNull)
  task          Task?          @relation(fields: [taskId], references: [id], onDelete: SetNull)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([projectId])
  @@index([taskId])
  @@index([userId])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  assigneeId  String?
  projectId   String
  parentId    String?
  listId      String?
  typeId      String?
  statusId    String?
  priorityId  String?

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent    Task?   @relation("TaskDependencies", fields: [parentId], references: [id])
  children  Task[]  @relation("TaskDependencies")
  assignee  User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy User    @relation("TaskCreator", fields: [createdById], references: [id])

  // Task Features
  labels       Label[]
  customFields CustomField[]
  customValues CustomFieldValue[]
  checklists   Checklist[]
  taskList     TaskList?           @relation(fields: [listId], references: [id])
  recurring    RecurringTask?
  taskType     TaskType?           @relation(fields: [typeId], references: [id])
  taskStatus   TaskStatus?         @relation(fields: [statusId], references: [id])
  taskPriority TaskPriority?       @relation(fields: [priorityId], references: [id])
  taskTags     TaskTagAssignment[]

  // Dependencies
  dependentOn  TaskDependency[] @relation("DependentTasks")
  dependedOnBy TaskDependency[] @relation("BlockingTasks")

  // Activity & Content
  activities  Activity[]
  comments    Comment[]
  timeEntries TimeEntry[]
  mentions    Mention[]
  attachments Attachment[]

  // Notifications & Logs
  notifications Notification[]
  emailLogs     EmailLog[]
  taskListItems TaskListItem[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([createdById])
  @@index([parentId])
  @@index([listId])
  @@index([typeId])
  @@index([statusId])
  @@index([priorityId])
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#000000")
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Checklist {
  id        String          @id @default(cuid())
  title     String
  taskId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  task      Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  items     ChecklistItem[]
}

model ChecklistItem {
  id          String    @id @default(cuid())
  content     String
  isCompleted Boolean   @default(false)
  checklistId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
}

model TaskType {
  id          String         @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String
  projectId   String
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  fields      CustomField[]
  templates   TaskTemplate[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
}

model TaskStatus {
  id          String   @id @default(cuid())
  name        String
  color       String
  icon        String?
  description String?
  category    String // "todo", "in_progress", "done", "canceled"
  position    Int // For ordering within category
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
  @@index([category])
}

model TaskPriority {
  id          String   @id @default(cuid())
  name        String
  level       Int // 1-5 for priority levels
  color       String
  icon        String?
  description String?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
  @@index([level])
}

model TaskTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String?
  icon          String?
  color         String?
  typeId        String
  type          TaskType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  defaultValues Json? // Default values for custom fields
  checklists    Json? // Predefined checklists
  attachments   Json? // Template attachments
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([typeId, name])
  @@index([typeId])
  @@index([projectId])
}

model TaskList {
  id          String         @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  viewType    String // "list", "board", "calendar", "gantt"
  filters     Json? // Saved filters
  sortOrder   Json? // Saved sort order
  groupBy     String? // Field to group by
  projectId   String
  parentId    String?
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent      TaskList?      @relation("TaskListHierarchy", fields: [parentId], references: [id])
  children    TaskList[]     @relation("TaskListHierarchy")
  tasks       TaskListItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Task        Task[]

  @@unique([projectId, name])
  @@index([projectId])
  @@index([parentId])
}

model TaskListItem {
  id        String   @id @default(cuid())
  taskId    String
  listId    String
  position  Float // For ordering within list
  pinned    Boolean  @default(false)
  hidden    Boolean  @default(false)
  metadata  Json?
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  list      TaskList @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([taskId, listId])
  @@index([taskId])
  @@index([listId])
  @@index([position])
}

model TaskTag {
  id          String              @id @default(cuid())
  name        String
  color       String
  icon        String?
  description String?
  projectId   String
  parentId    String?
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent      TaskTag?            @relation("TaskTagHierarchy", fields: [parentId], references: [id])
  children    TaskTag[]           @relation("TaskTagHierarchy")
  tasks       TaskTagAssignment[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
  @@index([parentId])
}

model TaskTagAssignment {
  id        String   @id @default(cuid())
  taskId    String
  tagId     String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag       TaskTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([taskId, tagId])
  @@index([taskId])
  @@index([tagId])
}

model CustomField {
  id           String             @id @default(cuid())
  name         String
  description  String?
  type         String // text, number, date, select, etc.
  required     Boolean            @default(false)
  options      Json? // For select/multiselect fields
  defaultValue Json?
  placeholder  String?
  validation   Json? // Validation rules
  position     Int
  taskTypeId   String
  taskType     TaskType           @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  values       CustomFieldValue[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  Project      Project[]
  Task         Task[]

  @@unique([taskTypeId, name])
  @@index([taskTypeId])
  @@index([type])
}

model CustomFieldValue {
  id        String      @id @default(cuid())
  value     Json
  taskId    String
  fieldId   String
  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  field     CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([taskId, fieldId])
  @@index([taskId])
  @@index([fieldId])
}

model TimeEntry {
  id          String    @id @default(cuid())
  taskId      String
  userId      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int? // Duration in minutes
  description String?
  metadata    Json?
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([taskId])
  @@index([userId])
}

model TaskDependency {
  id          String   @id @default(cuid())
  taskId      String
  dependsOnId String
  type        String // blocks, blocked_by, relates_to, etc.
  metadata    Json?
  task        Task     @relation("DependentTasks", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOn   Task     @relation("BlockingTasks", fields: [dependsOnId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([taskId, dependsOnId])
}

model RecurringTask {
  id         String    @id @default(cuid())
  taskId     String    @unique
  frequency  String // daily, weekly, monthly, custom
  interval   Int // e.g., every 2 weeks
  daysOfWeek Int[] // [1,3,5] for Mon,Wed,Fri
  monthDay   Int? // day of month for monthly
  endDate    DateTime?
  lastRun    DateTime?
  nextRun    DateTime?
  metadata   Json?
  task       Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([frequency])
  @@index([nextRun])
}

model ProjectInvitation {
  id            String   @id @default(cuid())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  invitedById   String
  invitedBy     User     @relation("SentInvitations", fields: [invitedById], references: [id])
  invitedUserId String
  invitedUser   User     @relation("ReceivedInvitations", fields: [invitedUserId], references: [id])
  status        String   @default("pending") // pending, accepted, declined
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([projectId])
  @@index([invitedById])
  @@index([invitedUserId])
}

model Notification {
  id         String   @id @default(cuid())
  type       String // task_update, mention, system, etc.
  category   String // project, task, member, system
  priority   String   @default("normal")
  title      String
  message    String
  read       Boolean  @default(false)
  dismissed  Boolean  @default(false)
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  projectId  String?
  taskId     String?
  activityId String?

  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  project              Project?               @relation(fields: [projectId], references: [id], onDelete: SetNull)
  task                 Task?                  @relation(fields: [taskId], references: [id], onDelete: SetNull)
  activity             Activity?              @relation(fields: [activityId], references: [id], onDelete: SetNull)
  deliveries           NotificationDelivery[]
  NotificationTemplate NotificationTemplate[]
  NotificationBatch    NotificationBatch[]

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([type, category])
  @@index([createdAt])
}

model NotificationDelivery {
  id             String   @id @default(cuid())
  notificationId String
  channel        String // app, email, push
  status         String // sent, delivered, failed
  error          String?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId, channel, status])
  @@index([createdAt])
}

model NotificationPreference {
  id        String   @id @default(cuid())
  userId    String
  channel   String // email, app, push
  type      String? // specific notification type
  enabled   Boolean  @default(true)
  schedule  Json? // time windows
  frequency String   @default("immediate") // immediate, daily, weekly
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel, type])
  @@index([userId, channel])
}

model PushSubscription {
  id        String   @id @default(cuid())
  token     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token, userId])
  @@index([userId])
  @@index([token])
}

model NotificationRateLimit {
  id           String   @id @default(cuid())
  userId       String
  channel      String // "app", "email", "push"
  templateType String? // Optional: specific template type to rate limit
  category     String? // Optional: specific category to rate limit
  maxPerMinute Int      @default(2)
  maxPerHour   Int      @default(30)
  maxPerDay    Int      @default(100)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel, templateType, category])
  @@index([userId])
  @@index([channel])
}

model NotificationThrottle {
  id           String   @id @default(cuid())
  userId       String
  channel      String
  templateType String?
  category     String?
  count        Int      @default(0)
  windowStart  DateTime
  windowEnd    DateTime
  windowType   String // "minute", "hour", "day"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([channel])
  @@index([windowStart])
  @@index([windowEnd])
}

model NotificationBatch {
  id           String    @id @default(cuid())
  userId       String
  templateType String
  category     String
  groupId      String?
  priority     String    @default("normal")
  status       String    @default("pending") // pending, sent, failed
  count        Int       @default(0)
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  scheduledFor DateTime?
  sentAt       DateTime?
  error        String?

  notifications Notification[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateType])
  @@index([category])
  @@index([status])
  @@index([scheduledFor])
  @@index([createdAt])
}

model NotificationBatchingRule {
  id           String   @id @default(cuid())
  userId       String
  templateType String? // Optional: specific template type to batch
  category     String? // Optional: specific category to batch
  enabled      Boolean  @default(true)
  batchWindow  Int      @default(300) // Time window in seconds to batch notifications
  minBatchSize Int      @default(2) // Minimum number of notifications to trigger a batch
  maxBatchSize Int      @default(10) // Maximum number of notifications in a batch
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateType, category])
  @@index([userId])
  @@index([templateType])
  @@index([category])
}

model NotificationFilter {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  conditions  Json // {type, category, priority, read, dismissed, dateRange, search, etc}
  sortBy      String   @default("createdAt")
  sortOrder   String   @default("desc")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@index([createdAt])
}

model NotificationAnalytics {
  id         String   @id @default(cuid())
  templateId String
  event      String // sent, delivered, read, clicked, converted
  metadata   Json? // Additional event data
  userId     String? // User who triggered the event
  timestamp  DateTime @default(now())

  template NotificationTemplate @relation(fields: [templateId], references: [id])
  user     User?                @relation(fields: [userId], references: [id])

  @@index([templateId])
  @@index([userId])
  @@index([event])
  @@index([timestamp])
}

model NotificationStats {
  id        String   @id @default(cuid())
  userId    String
  period    String // daily, weekly, monthly
  date      DateTime
  channel   String // app, email, push
  total     Int      @default(0)
  read      Int      @default(0)
  clicked   Int      @default(0)
  dismissed Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, date, channel])
  @@index([userId])
  @@index([period])
  @@index([date])
  @@index([channel])
}

model BulkAction {
  id          String    @id @default(cuid())
  userId      String
  type        String // markAsRead, markAsUnread, dismiss, delete
  status      String // pending, processing, completed, failed
  total       Int       @default(0)
  processed   Int       @default(0)
  failed      Int       @default(0)
  filter      Json? // Filter conditions for the bulk action
  error       String? // Error message if failed
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String // email, push, app
  title       String
  body        String
  metadata    Json? // Additional template data (icons, actions, etc)
  variables   Json? // List of variables used in the template
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  updatedById String?

  createdBy User  @relation("CreatedTemplates", fields: [createdById], references: [id])
  updatedBy User? @relation("UpdatedTemplates", fields: [updatedById], references: [id])

  versions      NotificationTemplateVersion[]
  notifications Notification[]
  analytics     TemplateAnalytics[]
  performance   TemplatePerformance[]
  campaigns     Campaign[]

  ABTest ABTest[]

  NotificationAnalytics NotificationAnalytics[]

  ScheduledNotification ScheduledNotification[]

  EmailLog EmailLog[]
}

model NotificationTemplateVersion {
  id          String   @id @default(cuid())
  templateId  String
  version     Int
  title       String
  body        String
  metadata    Json?
  variables   Json?
  createdAt   DateTime @default(now())
  createdById String

  template  NotificationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdBy User                 @relation(fields: [createdById], references: [id])
  User      User[]               @relation("VersionCreator")

  @@unique([templateId, version])
  @@index([templateId])
  @@index([createdById])
}

model ABTest {
  id             String    @id @default(cuid())
  name           String
  description    String?
  templateId     String
  variants       Json // Array of template variants
  startDate      DateTime
  endDate        DateTime?
  status         String // draft, active, completed, stopped
  winningVariant String?
  metrics        Json? // Test metrics and results
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdById    String

  template  NotificationTemplate @relation(fields: [templateId], references: [id])
  createdBy User                 @relation(fields: [createdById], references: [id])
  User      User[]               @relation("TestCreator")

  @@index([templateId])
  @@index([createdById])
  @@index([status])
}

model ABTestEvent {
  id        String   @id @default(cuid())
  testId    String
  variantId String
  userId    String
  event     String // sent, delivered, read, clicked
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@index([variantId])
  @@index([userId])
  @@index([event])
  @@index([createdAt])
}

model ScheduledNotification {
  id          String    @id @default(cuid())
  templateId  String
  recipients  Json // Array of user IDs or criteria
  schedule    Json // Schedule configuration (one-time, recurring)
  data        Json? // Template data/variables
  status      String // pending, processing, completed, failed, cancelled
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String

  template  NotificationTemplate @relation(fields: [templateId], references: [id])
  createdBy User                 @relation(fields: [createdById], references: [id])
  User      User[]               @relation("NotificationCreator")

  @@index([templateId])
  @@index([createdById])
  @@index([status])
  @@index([nextRunAt])
}

model RecurringSchedule {
  id        String    @id @default(cuid())
  type      String // daily, weekly, monthly
  time      String // HH:mm format
  days      Json? // Array of days for weekly/monthly
  timezone  String // User's timezone
  startDate DateTime
  endDate   DateTime?
  lastRunAt DateTime?
  nextRunAt DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([type])
  @@index([isActive])
  @@index([nextRunAt])
}

model TemplateAnalytics {
  id         String   @id @default(cuid())
  templateId String
  event      String // sent, delivered, read, clicked, converted
  metadata   Json? // Additional event data
  userId     String? // User who triggered the event
  timestamp  DateTime @default(now())

  template NotificationTemplate @relation(fields: [templateId], references: [id])
  user     User?                @relation(fields: [userId], references: [id])

  @@index([templateId])
  @@index([userId])
  @@index([event])
  @@index([timestamp])
}

model TemplatePerformance {
  id              String   @id @default(cuid())
  templateId      String
  period          String // daily, weekly, monthly
  startDate       DateTime
  endDate         DateTime
  sentCount       Int      @default(0)
  deliveredCount  Int      @default(0)
  readCount       Int      @default(0)
  clickCount      Int      @default(0)
  conversionCount Int      @default(0)
  deliveryRate    Float    @default(0)
  readRate        Float    @default(0)
  clickRate       Float    @default(0)
  conversionRate  Float    @default(0)
  averageReadTime Float? // In seconds
  metadata        Json? // Additional metrics

  template NotificationTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, period, startDate])
  @@index([templateId])
  @@index([period])
  @@index([startDate])
  @@index([endDate])
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String // draft, scheduled, active, paused, completed
  templateId  String
  audience    Json // Target audience criteria
  schedule    Json // Campaign schedule configuration
  metadata    Json? // Additional campaign settings
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String

  template  NotificationTemplate @relation(fields: [templateId], references: [id])
  createdBy User                 @relation(fields: [createdById], references: [id])
  metrics   CampaignMetrics?
  events    CampaignEvent[]
  User      User[]               @relation("CampaignCreator")

  @@index([templateId])
  @@index([createdById])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model CampaignMetrics {
  id              String   @id @default(cuid())
  campaignId      String   @unique
  targetAudience  Int      @default(0)
  sentCount       Int      @default(0)
  deliveredCount  Int      @default(0)
  readCount       Int      @default(0)
  clickCount      Int      @default(0)
  conversionCount Int      @default(0)
  bounceCount     Int      @default(0)
  optOutCount     Int      @default(0)
  deliveryRate    Float    @default(0)
  readRate        Float    @default(0)
  clickRate       Float    @default(0)
  conversionRate  Float    @default(0)
  bounceRate      Float    @default(0)
  optOutRate      Float    @default(0)
  lastUpdated     DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model CampaignEvent {
  id         String   @id @default(cuid())
  campaignId String
  userId     String?
  event      String // sent, delivered, read, clicked, converted, bounced, optedOut
  metadata   Json? // Additional event data
  timestamp  DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])

  @@index([campaignId])
  @@index([userId])
  @@index([event])
  @@index([timestamp])
}

model Webhook {
  id            String   @id @default(cuid())
  integrationId String
  url           String
  secret        String?
  events        String[] // Array of event types
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  integration Integration       @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  deliveries  WebhookDelivery[]
  Project     Project[]

  @@index([integrationId])
  @@index([active])
}

model WebhookDelivery {
  id         String   @id @default(cuid())
  webhookId  String
  event      String
  payload    Json
  status     String // success, failed
  statusCode Int?
  error      String?
  createdAt  DateTime @default(now())

  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, status])
  @@index([createdAt])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String
  subject   String
  body      String   @db.Text
  events    Json // Array of event names
  enabled   Boolean  @default(true)
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  logs    EmailLog[]
}

model EmailLog {
  id          String   @id @default(cuid())
  templateId  String
  recipientId String
  taskId      String
  commentId   String?
  subject     String
  content     String
  status      String // sent, delivered, failed
  metadata    Json?
  createdAt   DateTime @default(now())

  template      NotificationTemplate @relation(fields: [templateId], references: [id])
  recipient     User                 @relation("ReceivedEmails", fields: [recipientId], references: [id])
  task          Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
  comment       Comment?             @relation(fields: [commentId], references: [id])
  EmailTemplate EmailTemplate[]

  @@index([templateId])
  @@index([recipientId])
  @@index([taskId])
  @@index([commentId])
}

model CalendarIntegration {
  id           String    @id @default(cuid())
  provider     String // google, outlook, ical
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  settings     Json?
  enabled      Boolean   @default(true)
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Comment {
  id        String     @id @default(cuid())
  content   String
  taskId    String
  userId    String
  replyToId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  task      Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  replyTo   Comment?   @relation("CommentReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies   Comment[]  @relation("CommentReplies")
  mentions  Mention[]
  emailLogs EmailLog[]

  @@index([taskId])
  @@index([userId])
}

model Mention {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  task    Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([commentId])
}

model Attachment {
  id         String   @id @default(cuid())
  name       String
  url        String
  type       String
  size       Int
  taskId     String
  uploaderId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  task     Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader User @relation("Uploads", fields: [uploaderId], references: [id])

  @@index([taskId])
  @@index([uploaderId])
}

model Workflow {
  id        String   @id @default(cuid())
  name      String
  projectId String
  statuses  Json // Array of status objects with transitions
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project     Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  automations WorkflowAutomation[]
}

model Integration {
  id         String    @id @default(cuid())
  projectId  String
  type       String // github, slack, jira
  name       String
  config     Json
  status     String    @default("active")
  lastSyncAt DateTime?
  metadata   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  project  Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  webhooks Webhook[]
  syncLogs IntegrationSyncLog[]

  @@unique([projectId, type, name])
  @@index([projectId, type])
  @@index([status])
}

model IntegrationSyncLog {
  id            String    @id @default(cuid())
  integrationId String
  type          String // full_sync, incremental
  status        String // success, failed
  error         String?
  metadata      Json?
  startedAt     DateTime  @default(now())
  completedAt   DateTime?

  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId, type, status])
  @@index([startedAt])
}

model Analytics {
  id        String   @id @default(cuid())
  type      String // task, project, user
  entityId  String // ID of the entity being analyzed
  metric    String // completion_rate, time_spent, etc.
  value     Float
  period    String // daily, weekly, monthly
  startDate DateTime
  endDate   DateTime
  metadata  Json?

  @@unique([type, entityId, metric, period, startDate])
  @@index([type, entityId])
  @@index([metric])
  @@index([period, startDate])
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String // create, update, delete
  entityType String // task, project, user
  entityId   String
  userId     String
  changes    Json? // Before/after changes
  metadata   Json?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([entityType, entityId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model WorkspaceAnalytics {
  id             String   @id @default(cuid())
  workspaceId    String   @unique
  activeUsers    Int      @default(0)
  taskCount      Int      @default(0)
  completedTasks Int      @default(0)
  documentCount  Int      @default(0)
  commentCount   Int      @default(0)
  storageUsed    BigInt   @default(0) // in bytes
  lastUpdated    DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}
