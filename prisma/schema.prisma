// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  workspaces    WorkspaceMember[]
  tasks         Task[]
  projects      Project[]    @relation("ProjectMembers")
  ownedProjects Project[]    @relation("ProjectOwner")
  sentInvitations ProjectInvitation[] @relation("SentInvitations")
  receivedInvitations ProjectInvitation[] @relation("ReceivedInvitations")
  notifications Notification[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     WorkspaceMember[]
  projects    Project[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  role        String    @default("member")
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workspaceId])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active")
  priority    String    @default("medium")
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  ownerId     String
  owner       User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     User[]    @relation("ProjectMembers")
  tasks       Task[]
  invitations ProjectInvitation[]
  activities  Activity[]

  @@index([workspaceId])
  @@index([ownerId])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?     @relation(fields: [assigneeId], references: [id])

  @@index([projectId])
  @@index([assigneeId])
}

model ProjectInvitation {
  id            String   @id @default(cuid())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  invitedById   String
  invitedBy     User    @relation("SentInvitations", fields: [invitedById], references: [id])
  invitedUserId String
  invitedUser   User    @relation("ReceivedInvitations", fields: [invitedUserId], references: [id])
  status        String   @default("pending") // pending, accepted, declined
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([projectId])
  @@index([invitedById])
  @@index([invitedUserId])
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // member_added, member_removed, task_created, task_completed, etc.
  data        Json     // Additional data specific to the activity type
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())

  @@index([projectId])
  @@index([userId])
}

model Notification {
  id          String    @id @default(cuid())
  type        String    // activity, mention, system
  title       String
  message     String
  read        Boolean   @default(false)
  activityId  String?
  activity    Activity? @relation(fields: [activityId], references: [id], onDelete: SetNull)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([activityId])
}
