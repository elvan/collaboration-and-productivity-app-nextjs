model Notification {
  id         String   @id @default(cuid())
  type       String // task_update, mention, system, etc.
  category   String // project, task, member, system
  priority   String   @default("normal")
  title      String
  message    String
  read       Boolean  @default(false)
  dismissed  Boolean  @default(false)
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  projectId  String?
  taskId     String?
  activityId String?

  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  project              Project?               @relation(fields: [projectId], references: [id], onDelete: SetNull)
  task                 Task?                  @relation(fields: [taskId], references: [id], onDelete: SetNull)
  activity             Activity?              @relation(fields: [activityId], references: [id], onDelete: SetNull)
  deliveries           NotificationDelivery[]
  NotificationTemplate NotificationTemplate[]
  NotificationBatch    NotificationBatch[]

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([type, category])
  @@index([createdAt])
}

model NotificationDelivery {
  id             String   @id @default(cuid())
  notificationId String
  channel        String // app, email, push
  status         String // sent, delivered, failed
  error          String?
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId, channel, status])
  @@index([createdAt])
}

model NotificationPreference {
  id        String   @id @default(cuid())
  userId    String
  channel   String // email, app, push
  type      String? // specific notification type
  enabled   Boolean  @default(true)
  schedule  Json? // time windows
  frequency String   @default("immediate") // immediate, daily, weekly
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel, type])
  @@index([userId, channel])
}

model NotificationRateLimit {
  id           String   @id @default(cuid())
  userId       String
  channel      String // "app", "email", "push"
  templateType String? // Optional: specific template type to rate limit
  category     String? // Optional: specific category to rate limit
  maxPerMinute Int      @default(2)
  maxPerHour   Int      @default(30)
  maxPerDay    Int      @default(100)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel, templateType, category])
  @@index([userId])
  @@index([channel])
}

model NotificationBatch {
  id           String    @id @default(cuid())
  userId       String
  templateType String
  category     String
  groupId      String?
  priority     String    @default("normal")
  status       String    @default("pending") // pending, sent, failed
  count        Int       @default(0)
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  scheduledFor DateTime?
  sentAt       DateTime?
  error        String?

  notifications Notification[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateType])
  @@index([category])
  @@index([status])
  @@index([scheduledFor])
  @@index([createdAt])
}

model NotificationBatchingRule {
  id           String   @id @default(cuid())
  userId       String
  templateType String? // Optional: specific template type to batch
  category     String? // Optional: specific category to batch
  enabled      Boolean  @default(true)
  batchWindow  Int      @default(300) // Time window in seconds to batch notifications
  minBatchSize Int      @default(2) // Minimum number of notifications to trigger a batch
  maxBatchSize Int      @default(10) // Maximum number of notifications in a batch
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateType, category])
  @@index([userId])
  @@index([templateType])
  @@index([category])
}

model NotificationFilter {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  conditions  Json // {type, category, priority, read, dismissed, dateRange, search, etc}
  sortBy      String   @default("createdAt")
  sortOrder   String   @default("desc")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@index([createdAt])
}

model NotificationAnalytics {
  id         String   @id @default(cuid())
  templateId String
  event      String // sent, delivered, read, clicked, converted
  metadata   Json? // Additional event data
  userId     String? // User who triggered the event
  timestamp  DateTime @default(now())

  template NotificationTemplate @relation(fields: [templateId], references: [id])
  user     User?                @relation(fields: [userId], references: [id])

  @@index([templateId])
  @@index([userId])
  @@index([event])
  @@index([timestamp])
}

model NotificationStats {
  id        String   @id @default(cuid())
  userId    String
  period    String // daily, weekly, monthly
  date      DateTime
  channel   String // app, email, push
  total     Int      @default(0)
  read      Int      @default(0)
  clicked   Int      @default(0)
  dismissed Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, date, channel])
  @@index([userId])
  @@index([period])
  @@index([date])
  @@index([channel])
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String // email, push, app
  title       String
  body        String
  metadata    Json? // Additional template data (icons, actions, etc)
  variables   Json? // List of variables used in the template
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  updatedById String?

  createdBy User  @relation("CreatedTemplates", fields: [createdById], references: [id])
  updatedBy User? @relation("UpdatedTemplates", fields: [updatedById], references: [id])

  versions      NotificationTemplateVersion[]
  notifications Notification[]
  analytics     TemplateAnalytics[]
  performance   TemplatePerformance[]
  campaigns     Campaign[]

  ABTest ABTest[]

  NotificationAnalytics NotificationAnalytics[]

  ScheduledNotification ScheduledNotification[]

  EmailLog EmailLog[]
}

model NotificationTemplateVersion {
  id          String   @id @default(cuid())
  templateId  String
  version     Int
  title       String
  body        String
  metadata    Json?
  variables   Json?
  createdAt   DateTime @default(now())
  createdById String

  template  NotificationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdBy User                 @relation(fields: [createdById], references: [id])
  User      User[]               @relation("VersionCreator")

  @@unique([templateId, version])
  @@index([templateId])
  @@index([createdById])
}

model ScheduledNotification {
  id          String    @id @default(cuid())
  templateId  String
  recipients  Json // Array of user IDs or criteria
  schedule    Json // Schedule configuration (one-time, recurring)
  data        Json? // Template data/variables
  status      String // pending, processing, completed, failed, cancelled
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String

  template  NotificationTemplate @relation(fields: [templateId], references: [id])
  createdBy User                 @relation(fields: [createdById], references: [id])
  User      User[]               @relation("NotificationCreator")

  @@index([templateId])
  @@index([createdById])
  @@index([status])
  @@index([nextRunAt])
}

model RecurringSchedule {
  id        String    @id @default(cuid())
  type      String // daily, weekly, monthly
  time      String // HH:mm format
  days      Json? // Array of days for weekly/monthly
  timezone  String // User's timezone
  startDate DateTime
  endDate   DateTime?
  lastRunAt DateTime?
  nextRunAt DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([type])
  @@index([isActive])
  @@index([nextRunAt])
}

model TemplateAnalytics {
  id         String   @id @default(cuid())
  templateId String
  event      String // sent, delivered, read, clicked, converted
  metadata   Json? // Additional event data
  userId     String? // User who triggered the event
  timestamp  DateTime @default(now())

  template NotificationTemplate @relation(fields: [templateId], references: [id])
  user     User?                @relation(fields: [userId], references: [id])

  @@index([templateId])
  @@index([userId])
  @@index([event])
  @@index([timestamp])
}

model TemplatePerformance {
  id              String   @id @default(cuid())
  templateId      String
  period          String // daily, weekly, monthly
  startDate       DateTime
  endDate         DateTime
  sentCount       Int      @default(0)
  deliveredCount  Int      @default(0)
  readCount       Int      @default(0)
  clickCount      Int      @default(0)
  conversionCount Int      @default(0)
  deliveryRate    Float    @default(0)
  readRate        Float    @default(0)
  clickRate       Float    @default(0)
  conversionRate  Float    @default(0)
  averageReadTime Float? // In seconds
  metadata        Json? // Additional metrics

  template NotificationTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, period, startDate])
  @@index([templateId])
  @@index([period])
  @@index([startDate])
  @@index([endDate])
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String // draft, scheduled, active, paused, completed
  templateId  String
  audience    Json // Target audience criteria
  schedule    Json // Campaign schedule configuration
  metadata    Json? // Additional campaign settings
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String

  template  NotificationTemplate @relation(fields: [templateId], references: [id])
  createdBy User                 @relation(fields: [createdById], references: [id])
  metrics   CampaignMetrics?
  events    CampaignEvent[]
  User      User[]               @relation("CampaignCreator")

  @@index([templateId])
  @@index([createdById])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
}

model CampaignMetrics {
  id              String   @id @default(cuid())
  campaignId      String   @unique
  targetAudience  Int      @default(0)
  sentCount       Int      @default(0)
  deliveredCount  Int      @default(0)
  readCount       Int      @default(0)
  clickCount      Int      @default(0)
  conversionCount Int      @default(0)
  bounceCount     Int      @default(0)
  optOutCount     Int      @default(0)
  deliveryRate    Float    @default(0)
  readRate        Float    @default(0)
  clickRate       Float    @default(0)
  conversionRate  Float    @default(0)
  bounceRate      Float    @default(0)
  optOutRate      Float    @default(0)
  lastUpdated     DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
}

model CampaignEvent {
  id         String   @id @default(cuid())
  campaignId String
  userId     String?
  event      String // sent, delivered, read, clicked, converted, bounced, optedOut
  metadata   Json? // Additional event data
  timestamp  DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])

  @@index([campaignId])
  @@index([userId])
  @@index([event])
  @@index([timestamp])
}

model ABTest {
  id             String    @id @default(cuid())
  name           String
  description    String?
  templateId     String
  variants       Json // Array of template variants
  startDate      DateTime
  endDate        DateTime?
  status         String // draft, active, completed, stopped
  winningVariant String?
  metrics        Json? // Test metrics and results
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdById    String

  template  NotificationTemplate @relation(fields: [templateId], references: [id])
  createdBy User                 @relation(fields: [createdById], references: [id])
  User      User[]               @relation("TestCreator")

  @@index([templateId])
  @@index([createdById])
  @@index([status])
}

model ABTestEvent {
  id        String   @id @default(cuid())
  testId    String
  variantId String
  userId    String
  event     String // sent, delivered, read, clicked
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@index([variantId])
  @@index([userId])
  @@index([event])
  @@index([createdAt])
}
