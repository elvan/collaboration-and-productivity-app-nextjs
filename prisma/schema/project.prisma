model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner     User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members   User[]    @relation("ProjectMembers")

  // Task Management
  tasks          Task[]
  labels         Label[]
  taskTypes      TaskType[]
  taskStatuses   TaskStatus[]
  taskPriorities TaskPriority[]
  taskTemplates  TaskTemplate[]
  taskLists      TaskList[]
  taskTags       TaskTag[]

  // Workflow & Automation
  workflows           Workflow[]
  priorityRules       PriorityRule[]
  workflowAutomations WorkflowAutomation[]

  // Project Features
  customFields   CustomField[]
  webhooks       Webhook[]
  emailTemplates EmailTemplate[]

  // Activity & Notifications
  activities    Activity[]
  notifications Notification[]
  invitations   ProjectInvitation[]

  // Integrations
  integrations Integration[]

  @@index([ownerId])
  @@index([workspaceId])
}

model PriorityRule {
  id         String   @id @default(cuid())
  projectId  String
  conditions Json // Serialized rule conditions
  enabled    Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model WorkflowAutomation {
  id          String   @id @default(cuid())
  name        String
  description String?
  projectId   String
  triggerType String // on_status_change, on_priority_change, etc.
  conditions  Json? // Conditions that must be met
  actions     Json // Actions to perform
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String

  @@index([projectId])
}

model Activity {
  id        String   @id @default(cuid())
  type      String // task_created, comment_added, etc.
  projectId String?
  taskId    String?
  userId    String
  metadata  Json?
  createdAt DateTime @default(now())

  project       Project?       @relation(fields: [projectId], references: [id], onDelete: SetNull)
  task          Task?          @relation(fields: [taskId], references: [id], onDelete: SetNull)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([projectId])
  @@index([taskId])
  @@index([userId])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdById String
  assigneeId  String?
  projectId   String
  parentId    String?
  listId      String?
  typeId      String?
  statusId    String?
  priorityId  String?

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent    Task?   @relation("TaskDependencies", fields: [parentId], references: [id])
  children  Task[]  @relation("TaskDependencies")
  assignee  User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy User    @relation("TaskCreator", fields: [createdById], references: [id])

  // Task Features
  labels       Label[]
  customFields CustomField[]
  customValues CustomFieldValue[]
  checklists   Checklist[]
  taskList     TaskList?           @relation(fields: [listId], references: [id])
  recurring    RecurringTask?
  taskType     TaskType?           @relation(fields: [typeId], references: [id])
  taskStatus   TaskStatus?         @relation(fields: [statusId], references: [id])
  taskPriority TaskPriority?       @relation(fields: [priorityId], references: [id])
  taskTags     TaskTagAssignment[]

  // Dependencies
  dependentOn  TaskDependency[] @relation("DependentTasks")
  dependedOnBy TaskDependency[] @relation("BlockingTasks")

  // Activity & Content
  activities  Activity[]
  comments    Comment[]
  timeEntries TimeEntry[]
  mentions    Mention[]
  attachments Attachment[]

  // Notifications & Logs
  notifications Notification[]
  emailLogs     EmailLog[]
  taskListItems TaskListItem[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([createdById])
  @@index([parentId])
  @@index([listId])
  @@index([typeId])
  @@index([statusId])
  @@index([priorityId])
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#000000")
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Checklist {
  id        String          @id @default(cuid())
  title     String
  taskId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  task      Task            @relation(fields: [taskId], references: [id], onDelete: Cascade)
  items     ChecklistItem[]
}

model ChecklistItem {
  id          String    @id @default(cuid())
  content     String
  isCompleted Boolean   @default(false)
  checklistId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  checklist   Checklist @relation(fields: [checklistId], references: [id], onDelete: Cascade)
}

model TaskType {
  id          String         @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String
  projectId   String
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  fields      CustomField[]
  templates   TaskTemplate[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
}

model TaskStatus {
  id          String   @id @default(cuid())
  name        String
  color       String
  icon        String?
  description String?
  category    String // "todo", "in_progress", "done", "canceled"
  position    Int // For ordering within category
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
  @@index([category])
}

model TaskPriority {
  id          String   @id @default(cuid())
  name        String
  level       Int // 1-5 for priority levels
  color       String
  icon        String?
  description String?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
  @@index([level])
}

model TaskTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String?
  icon          String?
  color         String?
  typeId        String
  type          TaskType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  defaultValues Json? // Default values for custom fields
  checklists    Json? // Predefined checklists
  attachments   Json? // Template attachments
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([typeId, name])
  @@index([typeId])
  @@index([projectId])
}

model TaskList {
  id          String         @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  viewType    String // "list", "board", "calendar", "gantt"
  filters     Json? // Saved filters
  sortOrder   Json? // Saved sort order
  groupBy     String? // Field to group by
  projectId   String
  parentId    String?
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent      TaskList?      @relation("TaskListHierarchy", fields: [parentId], references: [id])
  children    TaskList[]     @relation("TaskListHierarchy")
  tasks       TaskListItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Task        Task[]

  @@unique([projectId, name])
  @@index([projectId])
  @@index([parentId])
}

model TaskListItem {
  id        String   @id @default(cuid())
  taskId    String
  listId    String
  position  Float // For ordering within list
  pinned    Boolean  @default(false)
  hidden    Boolean  @default(false)
  metadata  Json?
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  list      TaskList @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([taskId, listId])
  @@index([taskId])
  @@index([listId])
  @@index([position])
}

model TaskTag {
  id          String              @id @default(cuid())
  name        String
  color       String
  icon        String?
  description String?
  projectId   String
  parentId    String?
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parent      TaskTag?            @relation("TaskTagHierarchy", fields: [parentId], references: [id])
  children    TaskTag[]           @relation("TaskTagHierarchy")
  tasks       TaskTagAssignment[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
  @@index([parentId])
}

model TaskTagAssignment {
  id        String   @id @default(cuid())
  taskId    String
  tagId     String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag       TaskTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([taskId, tagId])
  @@index([taskId])
  @@index([tagId])
}

model CustomField {
  id           String             @id @default(cuid())
  name         String
  description  String?
  type         String // text, number, date, select, etc.
  required     Boolean            @default(false)
  options      Json? // For select/multiselect fields
  defaultValue Json?
  placeholder  String?
  validation   Json? // Validation rules
  position     Int
  taskTypeId   String
  taskType     TaskType           @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  values       CustomFieldValue[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  Project      Project[]
  Task         Task[]

  @@unique([taskTypeId, name])
  @@index([taskTypeId])
  @@index([type])
}

model CustomFieldValue {
  id        String      @id @default(cuid())
  value     Json
  taskId    String
  fieldId   String
  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  field     CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([taskId, fieldId])
  @@index([taskId])
  @@index([fieldId])
}

model TimeEntry {
  id          String    @id @default(cuid())
  taskId      String
  userId      String
  startTime   DateTime
  endTime     DateTime?
  duration    Int? // Duration in minutes
  description String?
  metadata    Json?
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([taskId])
  @@index([userId])
}

model TaskDependency {
  id          String   @id @default(cuid())
  taskId      String
  dependsOnId String
  type        String // blocks, blocked_by, relates_to, etc.
  metadata    Json?
  task        Task     @relation("DependentTasks", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOn   Task     @relation("BlockingTasks", fields: [dependsOnId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([taskId, dependsOnId])
}

model RecurringTask {
  id         String    @id @default(cuid())
  taskId     String    @unique
  frequency  String // daily, weekly, monthly, custom
  interval   Int // e.g., every 2 weeks
  daysOfWeek Int[] // [1,3,5] for Mon,Wed,Fri
  monthDay   Int? // day of month for monthly
  endDate    DateTime?
  lastRun    DateTime?
  nextRun    DateTime?
  metadata   Json?
  task       Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([frequency])
  @@index([nextRun])
}

model ProjectInvitation {
  id            String   @id @default(cuid())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  invitedById   String
  invitedBy     User     @relation("SentInvitations", fields: [invitedById], references: [id])
  invitedUserId String
  invitedUser   User     @relation("ReceivedInvitations", fields: [invitedUserId], references: [id])
  status        String   @default("pending") // pending, accepted, declined
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([projectId])
  @@index([invitedById])
  @@index([invitedUserId])
}
