// User Profile Models
model UserProfile {
  id     String @id @default(cuid())
  userId String @unique

  // Professional Info
  title           String?
  company         String?
  department      String?
  jobRole         String?
  yearsExperience Int?
  industry        String?
  specializations String[]
  languages       String[] // Professional languages
  verifiedAt      DateTime?
  verifiedBy      String? // Organization that verified the profile
  verificationBadges VerificationBadge[]

  // Contact Info
  phone          String?
  alternateEmail String?
  timezone       String?
  availability   AvailabilityStatus @default(AVAILABLE)

  // Social Media
  linkedIn  String?
  twitter   String?
  github    String?
  portfolio String?
  blog      String?

  // Profile Details
  headline     String?       @db.Text
  about        String?       @db.Text
  skills       Skill[] // Relation to skills with endorsements
  interests    String[] // Array of interest areas
  achievements Achievement[]
  expertise    ExpertiseArea[]

  // Profile Customization
  theme          ProfileTheme  @default(SYSTEM)
  layout         ProfileLayout @default(STANDARD)
  accentColor    String? // Custom accent color
  coverImage     String? // URL to cover image
  avatarStyle    AvatarStyle   @default(CIRCLE)
  featuredWork   Json? // Pinned/featured items
  customSections Json? // User-defined sections
  widgetLayout   Json? // Custom widget arrangement
  customCss      String? // Custom CSS for profile
  brandKit       BrandKit? // Custom branding

  // Visibility Settings
  visibility        ProfileVisibility @default(PUBLIC)
  contactVisibility ContactVisibility @default(TEAM)
  resumeVisibility  ResumeVisibility  @default(PRIVATE)
  searchable        Boolean           @default(true)
  showActivity      Boolean           @default(true)
  showAchievements  Boolean           @default(true)
  customPermissions Json? // Fine-grained visibility rules

  // Professional Background
  education      Education[]
  experience     Experience[]
  certifications Certification[]
  publications   Publication[]
  projects       ProjectShowcase[]

  // Analytics & Engagement
  analytics  ProfileAnalytics?
  engagement ProfileEngagement?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Skill {
  id           String             @id @default(cuid())
  name         String
  category     String?
  level        SkillLevel         @default(INTERMEDIATE)
  yearsOfExp   Int?
  endorsed     Boolean            @default(false)
  endorsements SkillEndorsement[]
  profiles     UserProfile[]

  @@unique([name])
}

model SkillEndorsement {
  id         String   @id @default(cuid())
  skillId    String
  endorserId String
  note       String?
  createdAt  DateTime @default(now())

  skill    Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)
  endorser User  @relation(fields: [endorserId], references: [id], onDelete: Cascade)

  @@index([skillId])
  @@index([endorserId])
}

model Achievement {
  id          String          @id @default(cuid())
  profileId   String
  title       String
  description String?         @db.Text
  date        DateTime
  type        AchievementType
  url         String?
  image       String?
  verified    Boolean         @default(false)

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Publication {
  id        String   @id @default(cuid())
  profileId String
  title     String
  publisher String?
  authors   String[]
  date      DateTime
  url       String?
  doi       String?
  citation  String?  @db.Text
  abstract  String?  @db.Text

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model ProjectShowcase {
  id           String    @id @default(cuid())
  profileId    String
  title        String
  description  String?   @db.Text
  role         String?
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  url          String?
  images       String[]
  technologies String[]

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model ProfileAnalytics {
  id                String @id @default(cuid())
  profileId         String @unique
  views             Int    @default(0)
  uniqueViews       Int    @default(0)
  searchAppearances Int    @default(0)
  contactClicks     Int    @default(0)
  profileScore      Float  @default(0.0)

  // Time-based metrics
  dailyViews  Json? // Daily view counts
  viewHistory Json? // Historical view data

  // Engagement metrics
  avgTimeOnProfile Float? // Average time spent on profile
  bounceRate       Float? // Profile bounce rate
  conversionRate   Float? // Profile to contact conversion

  // Visitor demographics
  visitorRoles      Json? // Visitor job roles
  visitorIndustries Json? // Visitor industries

  // Search analytics
  searchKeywords Json? // Keywords that led to profile
  searchRankings Json? // Search result positions

  // Enhanced metrics
  skillEndorsements    Json?    // Endorsement analytics by skill
  expertiseGrowth      Json?    // Expertise development over time
  connectionQuality    Float?   // Score based on connection relevance
  influenceScore      Float?   // Professional influence metric
  
  // Interaction patterns
  peakActivityTimes   Json?    // Most active times
  interactionTypes    Json?    // Types of profile interactions
  referralSources     Json?    // Traffic sources
  
  // Career progression
  careerMilestones    Json?    // Timeline of achievements
  skillProgression    Json?    // Skill development over time
  industryPresence    Json?    // Industry-specific metrics
  
  // Comparative analytics
  peerComparison      Json?    // Metrics compared to peers
  industryBenchmarks  Json?    // Industry-standard comparisons
  
  // Predictive metrics
  growthPotential     Float?   // Career growth prediction
  engagementTrends    Json?    // Trend analysis and predictions

  lastUpdated DateTime    @updatedAt
  profile     UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ProfileEngagement {
  id        String @id @default(cuid())
  profileId String @unique

  // Interaction counts
  endorsements Int @default(0)
  connections  Int @default(0)
  messages     Int @default(0)
  shares       Int @default(0)

  // Engagement metrics
  responseRate   Float? // Message response rate
  connectionRate Float? // Connection accept rate

  // Activity metrics
  lastActive    DateTime?
  activityScore Float     @default(0.0)

  // Network metrics
  networkSize   Int   @default(0)
  networkGrowth Json? // Network growth over time

  lastUpdated DateTime    @updatedAt
  profile     UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ExpertiseArea {
  id          String   @id @default(cuid())
  profileId   String
  area        String
  level       Int      @default(1) // 1-5 expertise level
  yearsOfExp  Int
  description String?  @db.Text
  highlights  String[]
  verified    Boolean  @default(false)
  
  profile     UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  endorsements ExpertiseEndorsement[]
  
  @@index([profileId])
}

model ExpertiseEndorsement {
  id           String   @id @default(cuid())
  expertiseId  String
  endorserId   String
  weight       Int      @default(1) // 1-5 endorsement weight
  comment      String?
  credentials  Json?    // Endorser's relevant credentials
  createdAt    DateTime @default(now())
  
  expertise    ExpertiseArea @relation(fields: [expertiseId], references: [id], onDelete: Cascade)
  endorser     User         @relation(fields: [endorserId], references: [id], onDelete: Cascade)
  
  @@index([expertiseId])
  @@index([endorserId])
}

model VerificationBadge {
  id          String   @id @default(cuid())
  profileId   String
  type        String   // e.g., "employment", "education", "certification"
  issuerId    String   // Organization that issued the verification
  issuerName  String
  issueDate   DateTime
  expiryDate  DateTime?
  credential  String?  // Credential ID or reference
  metadata    Json?    // Additional verification data
  status      VerificationStatus @default(PENDING)
  
  profile     UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@index([profileId])
  @@index([type])
  @@index([status])
}

model BrandKit {
  id          String   @id @default(cuid())
  profileId   String   @unique
  colors      Json     // Primary, secondary, accent colors
  fonts       Json     // Font families and sizes
  logo        String?  // URL to personal/company logo
  bannerImage String?  // URL to banner image
  templates   Json?    // Custom section templates
  
  profile     UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum ProfileVisibility {
  PRIVATE
  CONNECTIONS
  TEAM
  WORKSPACE
  PUBLIC
}

enum ContactVisibility {
  PRIVATE
  CONNECTIONS
  TEAM
  WORKSPACE
  PUBLIC
}

enum ResumeVisibility {
  PRIVATE
  CONNECTIONS
  TEAM
  WORKSPACE
  PUBLIC
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProfileTheme {
  SYSTEM
  LIGHT
  DARK
  CUSTOM
}

enum ProfileLayout {
  STANDARD
  COMPACT
  CREATIVE
  MINIMAL
  CUSTOM_GRID
  PORTFOLIO
  TIMELINE
}

enum AvatarStyle {
  CIRCLE
  SQUARE
  ROUNDED
  HEXAGON
}

enum AvailabilityStatus {
  AVAILABLE
  BUSY
  AWAY
  DO_NOT_DISTURB
  OFFLINE
}

enum AchievementType {
  AWARD
  CERTIFICATION
  PUBLICATION
  PATENT
  PRESENTATION
  OTHER
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

model Education {
  id           String    @id @default(cuid())
  profileId    String
  institution  String
  degree       String?
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  description  String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Experience {
  id          String    @id @default(cuid())
  profileId   String
  company     String
  title       String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Certification {
  id           String    @id @default(cuid())
  profileId    String
  name         String
  issuer       String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?
  url          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}
