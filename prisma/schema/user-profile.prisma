// User Profile Models
model UserProfile {
  id     String @id @default(cuid())
  userId String @unique

  // Professional Info
  title              String?
  company            String?
  department         String?
  jobRole            String?
  yearsExperience    Int?
  industry           String?
  specializations    String[]
  languages          String[] // Professional languages
  verifiedAt         DateTime?
  verifiedBy         String? // Organization that verified the profile
  verificationBadges VerificationBadge[]

  // Contact Info
  phone          String?
  alternateEmail String?
  timezone       String?
  availability   AvailabilityStatus @default(AVAILABLE)

  // Social Media
  linkedIn  String?
  twitter   String?
  github    String?
  portfolio String?
  blog      String?

  // Profile Details
  headline            String?                @db.Text
  about               String?                @db.Text
  skills              Skill[] // Relation to skills with endorsements
  interests           String[] // Array of interest areas
  achievements        Achievement[]
  expertise           ExpertiseArea[]
  mentorship          MentorshipProfile?
  speakingEngagements ProfessionalEvent[]
  publications        Publication[]
  knowledgeBase       KnowledgeBase?
  contributions       Contribution[]
  // Profile Customization
  theme               ProfileTheme           @default(SYSTEM)
  layout              ProfileLayout          @default(STANDARD)
  accentColor         String? // Custom accent color
  coverImage          String? // URL to cover image
  avatarStyle         AvatarStyle            @default(CIRCLE)
  featuredWork        Json? // Pinned/featured items
  customSections      Json? // User-defined sections
  widgetLayout        Json? // Custom widget arrangement
  customCss           String? // Custom CSS for profile
  brandKit            BrandKit? // Custom branding
  accessibility       AccessibilitySettings?
  localization        LocalizationSettings?
  displayPreferences  DisplayPreferences?
  // Visibility Settings
  visibility          ProfileVisibility      @default(PUBLIC)
  contactVisibility   ContactVisibility      @default(TEAM)
  resumeVisibility    ResumeVisibility       @default(PRIVATE)
  searchable          Boolean                @default(true)
  showActivity        Boolean                @default(true)
  showAchievements    Boolean                @default(true)
  customPermissions   Json? // Fine-grained visibility rules

  // Professional Background
  education      Education[]
  experience     Experience[]
  certifications Certification[]
  projects       ProjectShowcase[]

  // Analytics & Engagement
  analytics  ProfileAnalytics?
  engagement ProfileEngagement?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Skill {
  id           String             @id @default(cuid())
  name         String
  category     String?
  level        SkillLevel         @default(INTERMEDIATE)
  yearsOfExp   Int?
  endorsed     Boolean            @default(false)
  endorsements SkillEndorsement[]
  profiles     UserProfile[]

  @@unique([name])
}

model SkillEndorsement {
  id          String   @id @default(cuid())
  skillId     String
  endorserId  String
  weight      Int      @default(1) // 1-5 endorsement weight
  comment     String?
  credentials Json? // Endorser's relevant credentials
  createdAt   DateTime @default(now())

  skill    Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)
  endorser User  @relation(fields: [endorserId], references: [id], onDelete: Cascade)

  @@index([skillId])
  @@index([endorserId])
}

model Achievement {
  id          String          @id @default(cuid())
  profileId   String
  title       String
  description String?         @db.Text
  date        DateTime
  type        AchievementType
  url         String?
  image       String?
  verified    Boolean         @default(false)

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Publication {
  id        String   @id @default(cuid())
  profileId String
  title     String
  publisher String?
  authors   String[]
  date      DateTime
  url       String?
  doi       String?
  citation  String?  @db.Text
  abstract  String?  @db.Text

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model ProjectShowcase {
  id           String    @id @default(cuid())
  profileId    String
  title        String
  description  String?   @db.Text
  role         String?
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  url          String?
  images       String[]
  technologies String[]

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model ProfileAnalytics {
  id                String @id @default(cuid())
  profileId         String @unique
  views             Int    @default(0)
  uniqueViews       Int    @default(0)
  searchAppearances Int    @default(0)
  contactClicks     Int    @default(0)
  profileScore      Float  @default(0.0)

  // Time-based metrics
  dailyViews  Json? // Daily view counts
  viewHistory Json? // Historical view data

  // Engagement metrics
  avgTimeOnProfile Float? // Average time spent on profile
  bounceRate       Float? // Profile bounce rate
  conversionRate   Float? // Profile to contact conversion

  // Visitor demographics
  visitorRoles      Json? // Visitor job roles
  visitorIndustries Json? // Visitor industries

  // Search analytics
  searchKeywords Json? // Keywords that led to profile
  searchRankings Json? // Search result positions

  // Enhanced metrics
  skillEndorsements Json? // Endorsement analytics by skill
  expertiseGrowth   Json? // Expertise development over time
  connectionQuality Float? // Score based on connection relevance
  influenceScore    Float? // Professional influence metric

  // Interaction patterns
  peakActivityTimes Json? // Most active times
  interactionTypes  Json? // Types of profile interactions
  referralSources   Json? // Traffic sources

  // Career progression
  careerMilestones Json? // Timeline of achievements
  skillProgression Json? // Skill development over time
  industryPresence Json? // Industry-specific metrics

  // Comparative analytics
  peerComparison     Json? // Metrics compared to peers
  industryBenchmarks Json? // Industry-standard comparisons

  // Predictive metrics
  growthPotential  Float? // Career growth prediction
  engagementTrends Json? // Trend analysis and predictions

  // Advanced Analytics
  contentEngagement  Json? // Content-specific engagement metrics
  audienceInsights   Json? // Detailed audience demographics
  competencyAnalysis Json? // Skills and expertise gap analysis
  networkValue       Float? // Network strength indicator
  thoughtLeadership  Json? // Content impact metrics

  // Learning Analytics
  learningProgress Json? // Skill acquisition rate
  knowledgeGaps    Json? // Identified areas for improvement
  learningStyle    String? // Preferred learning methods

  // Mentor Analytics
  mentorshipImpact Json? // Mentorship effectiveness metrics
  menteeProgress   Json? // Mentee success tracking
  mentorshipROI    Float? // Return on mentorship investment

  // Event Analytics
  eventPerformance Json? // Speaking engagement metrics
  audienceFeedback Json? // Aggregated feedback scores
  contentReach     Json? // Content distribution metrics

  // Predictive Analytics
  careerTrajectory Json? // Career path predictions
  skillsDemand     Json? // Market demand for skills
  networkGrowth    Json? // Network expansion predictions

  // Competitive Analytics
  marketPosition   Json? // Industry standing
  peerBenchmarking Json? // Detailed peer comparisons
  industryTrends   Json? // Relevant industry movements

  lastUpdated DateTime    @updatedAt
  profile     UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ProfileEngagement {
  id        String @id @default(cuid())
  profileId String @unique

  // Interaction counts
  endorsements Int @default(0)
  connections  Int @default(0)
  messages     Int @default(0)
  shares       Int @default(0)

  // Engagement metrics
  responseRate   Float? // Message response rate
  connectionRate Float? // Connection accept rate

  // Activity metrics
  lastActive    DateTime?
  activityScore Float     @default(0.0)

  // Network metrics
  networkSize   Int   @default(0)
  networkGrowth Json? // Network growth over time

  lastUpdated DateTime    @updatedAt
  profile     UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ExpertiseArea {
  id          String   @id @default(cuid())
  profileId   String
  area        String
  level       Int      @default(1) // 1-5 expertise level
  yearsOfExp  Int
  description String?  @db.Text
  highlights  String[]
  verified    Boolean  @default(false)

  profile      UserProfile            @relation(fields: [profileId], references: [id], onDelete: Cascade)
  endorsements ExpertiseEndorsement[]

  @@index([profileId])
}

model ExpertiseEndorsement {
  id          String   @id @default(cuid())
  expertiseId String
  endorserId  String
  weight      Int      @default(1) // 1-5 endorsement weight
  comment     String?
  credentials Json? // Endorser's relevant credentials
  createdAt   DateTime @default(now())

  expertise ExpertiseArea @relation(fields: [expertiseId], references: [id], onDelete: Cascade)
  endorser  User          @relation(fields: [endorserId], references: [id], onDelete: Cascade)

  @@index([expertiseId])
  @@index([endorserId])
}

model VerificationBadge {
  id         String             @id @default(cuid())
  profileId  String
  type       String // e.g., "employment", "education", "certification"
  issuerId   String // Organization that issued the verification
  issuerName String
  issueDate  DateTime
  expiryDate DateTime?
  credential String? // Credential ID or reference
  metadata   Json? // Additional verification data
  status     VerificationStatus @default(PENDING)

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([type])
  @@index([status])
}

model BrandKit {
  id          String  @id @default(cuid())
  profileId   String  @unique
  colors      Json // Primary, secondary, accent colors
  fonts       Json // Font families and sizes
  logo        String? // URL to personal/company logo
  bannerImage String? // URL to banner image
  templates   Json? // Custom section templates

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model MentorshipProfile {
  id           String                  @id @default(cuid())
  profileId    String                  @unique
  status       MentorshipStatus        @default(AVAILABLE)
  specialties  String[]
  experience   Int // Years of mentoring experience
  menteeCount  Int                     @default(0)
  successRate  Float?
  methodology  String?                 @db.Text
  availability Json // Availability schedule
  testimonials MentorshipTestimonial[]
  programs     MentorshipProgram[]

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model MentorshipTestimonial {
  id           String   @id @default(cuid())
  mentorshipId String
  menteeId     String
  rating       Int // 1-5 rating
  review       String   @db.Text
  impact       String?  @db.Text
  duration     Int // Mentorship duration in months
  createdAt    DateTime @default(now())

  mentorship MentorshipProfile @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)
  mentee     User              @relation(fields: [menteeId], references: [id])

  @@index([mentorshipId])
  @@index([menteeId])
}

model MentorshipProgram {
  id            String    @id @default(cuid())
  mentorshipId  String
  title         String
  description   String    @db.Text
  duration      Int // Program duration in weeks
  capacity      Int // Maximum number of mentees
  objectives    String[]
  curriculum    Json // Program structure
  prerequisites String[]
  price         Float? // Optional program fee
  startDate     DateTime?

  mentorship MentorshipProfile @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)

  @@index([mentorshipId])
}

model ProfessionalEvent {
  id           String                @id @default(cuid())
  profileId    String
  title        String
  type         ProfessionalEventType
  organization String
  date         DateTime
  location     String?
  description  String?               @db.Text
  audience     String?
  impact       Int? // Audience size
  recording    String? // URL to recording
  slides       String? // URL to slides
  feedback     Json? // Audience feedback
  topics       String[]

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([type])
}

model AccessibilitySettings {
  id             String  @id @default(cuid())
  profileId      String  @unique
  highContrast   Boolean @default(false)
  fontSize       Float   @default(1.0)
  fontFamily     String?
  reduceMotion   Boolean @default(false)
  screenReader   Boolean @default(false)
  colorBlindMode Boolean @default(false)
  keyboardNav    Boolean @default(false)
  customSettings Json?

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model LocalizationSettings {
  id              String   @id @default(cuid())
  profileId       String   @unique
  primaryLanguage String
  languages       String[] // Supported languages
  dateFormat      String   @default("YYYY-MM-DD")
  timeFormat      String   @default("24h")
  timezone        String
  currency        String   @default("USD")
  translations    Json? // Custom translations

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model DisplayPreferences {
  id             String         @id @default(cuid())
  profileId      String         @unique
  defaultView    ViewMode       @default(STANDARD)
  sectionOrder   String[] // Ordered list of section IDs
  hiddenSections String[] // List of hidden section IDs
  compactMode    Boolean        @default(false)
  animationLevel AnimationLevel @default(MODERATE)
  cardStyle      CardStyle      @default(MODERN)
  gridColumns    Int            @default(2)

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model KnowledgeBase {
  id            String                  @id @default(cuid())
  profileId     String                  @unique
  articles      KnowledgeArticle[]
  resources     Resource[]
  collections   KnowledgeCollection[]
  collaborators KnowledgeCollaborator[]
  topics        Topic[]
  stats         KnowledgeStats?

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model KnowledgeArticle {
  id                    String                 @id @default(cuid())
  knowledgeBaseId       String
  title                 String
  content               String                 @db.Text
  status                ArticleStatus          @default(DRAFT)
  visibility            ContentVisibility      @default(PUBLIC)
  tags                  String[]
  category              String?
  version               Int                    @default(1)
  revisions             ArticleRevision[]
  contributors          ArticleContributor[]
  references            String[] // Citations and references
  readingTime           Int? // Estimated reading time in minutes
  complexity            ComplexityLevel        @default(INTERMEDIATE)
  prerequisites         String[]
  feedback              ArticleFeedback[]
  views                 Int                    @default(0)
  shares                Int                    @default(0)
  collaborativeSessions CollaborativeSession[]
  qualityMetrics        QualityMetrics?
  contentBlocks         ContentBlock[]
  taxonomyTags          TaxonomyTag[]
  relatedArticles       KnowledgeArticle[]     @relation("RelatedArticles")
  parentArticles        KnowledgeArticle[]     @relation("RelatedArticles")
  engagementMetrics     EngagementMetrics?
  comments              ArticleComment[]
  annotations           Annotation[]
  reviewCycles          ReviewCycle[]
  aiAnalysis            AIAnalysis?
  learningPathways      LearningPathway[]      @relation("PathwayArticles")
  pathwayPrerequisites  LearningPathway[]      @relation("PathwayPrerequisites")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  knowledgeBase KnowledgeBase         @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  collections   KnowledgeCollection[]
  topics        Topic[]

  @@index([knowledgeBaseId])
}

model ArticleRevision {
  id             String       @id @default(cuid())
  articleId      String
  content        String       @db.Text
  changeLog      String?      @db.Text
  version        Int
  createdBy      String
  reviewedBy     String?
  reviewStatus   ReviewStatus @default(PENDING)
  reviewComments String?      @db.Text

  createdAt DateTime @default(now())

  article  KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author   User             @relation("RevisionAuthor", fields: [createdBy], references: [id])
  reviewer User?            @relation("RevisionReviewer", fields: [reviewedBy], references: [id])

  @@index([articleId])
  @@index([createdBy])
  @@index([reviewedBy])
}

model ArticleContributor {
  id           String          @id @default(cuid())
  articleId    String
  userId       String
  role         ContributorRole
  contribution String?         @db.Text

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id])

  @@index([articleId])
  @@index([userId])
}

model ArticleFeedback {
  id          String          @id @default(cuid())
  articleId   String
  userId      String
  rating      Int // 1-5 rating
  comment     String?         @db.Text
  helpfulness Boolean?
  expertise   ExpertiseLevel?

  createdAt DateTime @default(now())

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id])

  @@index([articleId])
  @@index([userId])
}

model Resource {
  id              String       @id @default(cuid())
  knowledgeBaseId String
  title           String
  type            ResourceType
  url             String?
  content         String?      @db.Text
  format          String?
  size            Int? // Size in bytes
  language        String?
  license         String?
  version         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  knowledgeBase KnowledgeBase         @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  collections   KnowledgeCollection[]
  topics        Topic[]

  @@index([knowledgeBaseId])
}

model KnowledgeCollection {
  id              String             @id @default(cuid())
  knowledgeBaseId String
  title           String
  description     String?            @db.Text
  visibility      ContentVisibility  @default(PUBLIC)
  articles        KnowledgeArticle[]
  resources       Resource[]
  topics          Topic[]
  parent          String? // Parent collection ID
  order           Int                @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@index([knowledgeBaseId])
}

model Topic {
  id              String                @id @default(cuid())
  knowledgeBaseId String
  name            String
  description     String?               @db.Text
  parent          String? // Parent topic ID
  articles        KnowledgeArticle[]
  resources       Resource[]
  collections     KnowledgeCollection[]

  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@unique([knowledgeBaseId, name])
  @@index([knowledgeBaseId])
}

model KnowledgeCollaborator {
  id              String           @id @default(cuid())
  knowledgeBaseId String
  userId          String
  role            CollaboratorRole
  permissions     Json // Detailed access permissions

  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id])

  @@index([knowledgeBaseId])
  @@index([userId])
}

model KnowledgeStats {
  id              String @id @default(cuid())
  knowledgeBaseId String @unique
  totalArticles   Int    @default(0)
  totalResources  Int    @default(0)
  totalViews      Int    @default(0)
  totalShares     Int    @default(0)
  avgRating       Float  @default(0.0)
  topContributors Json? // List of top contributors
  popularTopics   Json? // Most viewed topics
  engagement      Json? // Engagement metrics

  updatedAt DateTime @updatedAt

  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
}

model CollaborativeSession {
  id           String                     @id @default(cuid())
  articleId    String
  status       SessionStatus              @default(ACTIVE)
  participants CollaborationParticipant[]
  operations   CollaborationOperation[]
  cursors      CursorPosition[]
  startTime    DateTime                   @default(now())
  endTime      DateTime?

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
}

model CollaborationParticipant {
  id        String          @id @default(cuid())
  sessionId String
  userId    String
  joinedAt  DateTime        @default(now())
  leftAt    DateTime?
  role      ParticipantRole @default(EDITOR)

  session    CollaborativeSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user       User                     @relation(fields: [userId], references: [id])
  cursors    CursorPosition[]
  operations CollaborationOperation[]

  @@index([sessionId])
  @@index([userId])
}

model CollaborationOperation {
  id            String        @id @default(cuid())
  sessionId     String
  participantId String
  type          OperationType
  position      Int
  content       String?
  metadata      Json?
  timestamp     DateTime      @default(now())

  session     CollaborativeSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant CollaborationParticipant @relation(fields: [participantId], references: [id])

  @@index([sessionId])
  @@index([participantId])
}

model CursorPosition {
  id            String   @id @default(cuid())
  sessionId     String
  participantId String
  position      Int
  selection     Json? // Selection range if any
  timestamp     DateTime @default(now())

  session     CollaborativeSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant CollaborationParticipant @relation(fields: [participantId], references: [id])

  @@index([sessionId])
  @@index([participantId])
}

model ContentBlock {
  id        String    @id @default(cuid())
  articleId String
  type      BlockType
  content   String    @db.Text
  metadata  Json?
  order     Int
  version   Int       @default(1)

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
}

model TaxonomyTag {
  id          String             @id @default(cuid())
  name        String
  category    String
  description String?            @db.Text
  parent      String? // Parent tag ID
  metadata    Json?
  articles    KnowledgeArticle[]

  @@unique([category, name])
}

model QualityMetrics {
  id            String        @id @default(cuid())
  articleId     String        @unique
  readability   Float? // Readability score
  completeness  Float? // Content completeness score
  accuracy      Float? // Accuracy score
  citations     Int           @default(0)
  expertReviews Int           @default(0)
  flags         QualityFlag[]
  lastAudit     DateTime?
  improvements  Json? // Suggested improvements

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model QualityFlag {
  id          String       @id @default(cuid())
  metricsId   String
  type        FlagType
  description String
  severity    FlagSeverity @default(MEDIUM)
  status      FlagStatus   @default(OPEN)
  createdAt   DateTime     @default(now())
  resolvedAt  DateTime?

  metrics QualityMetrics @relation(fields: [metricsId], references: [id], onDelete: Cascade)

  @@index([metricsId])
}

model EngagementMetrics {
  id           String @id @default(cuid())
  articleId    String @unique
  viewDuration Json // Time spent viewing sections
  scrollDepth  Json // Scroll depth heatmap
  interactions Json // Click and interaction data
  shareContext Json? // Context of shares
  referrers    Json? // Traffic sources
  deviceTypes  Json? // Device type breakdown
  bookmarks    Int    @default(0)
  prints       Int    @default(0)
  downloads    Int    @default(0)

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model ArticleComment {
  id         String                   @id @default(cuid())
  articleId  String
  userId     String
  content    String                   @db.Text
  parentId   String? // For threaded comments
  status     CommentStatus            @default(ACTIVE)
  reactions  ArticleCommentReaction[]
  mentions   String[] // Mentioned user IDs
  resolved   Boolean                  @default(false)
  resolvedBy String?
  resolvedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id])
  parent  ArticleComment?  @relation("CommentThread", fields: [parentId], references: [id])
  replies ArticleComment[] @relation("CommentThread")

  @@index([articleId])
  @@index([userId])
  @@index([parentId])
}

model ArticleCommentReaction {
  id        String       @id @default(cuid())
  commentId String
  userId    String
  type      ReactionType
  createdAt DateTime     @default(now())

  comment ArticleComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id])

  @@unique([commentId, userId, type])
  @@index([commentId])
  @@index([userId])
}

model Annotation {
  id         String               @id @default(cuid())
  articleId  String
  userId     String
  content    String               @db.Text
  selection  Json // Selected text range
  type       AnnotationType       @default(NOTE)
  visibility AnnotationVisibility @default(PRIVATE)
  status     AnnotationStatus     @default(ACTIVE)
  tags       String[]
  reactions  AnnotationReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id])

  @@index([articleId])
  @@index([userId])
}

model AnnotationReaction {
  id           String       @id @default(cuid())
  annotationId String
  userId       String
  type         ReactionType
  createdAt    DateTime     @default(now())

  annotation Annotation @relation(fields: [annotationId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id])

  @@unique([annotationId, userId, type])
  @@index([annotationId])
  @@index([userId])
}

model ReviewCycle {
  id         String            @id @default(cuid())
  articleId  String
  status     ReviewStatus      @default(IN_PROGRESS)
  reviewers  String[] // User IDs
  deadline   DateTime?
  feedback   Json? // Structured feedback
  resolution ReviewResolution?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
}

model AIAnalysis {
  id          String   @id @default(cuid())
  articleId   String   @unique
  readability Json? // Detailed readability metrics
  sentiment   Json? // Content sentiment analysis
  topics      Json? // Auto-detected topics
  keywords    String[] // Key terms and phrases
  summary     String?  @db.Text
  suggestions Json? // AI-generated improvements

  lastAnalysis DateTime @default(now())

  article KnowledgeArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model LearningPathway {
  id            String             @id @default(cuid())
  title         String
  description   String             @db.Text
  difficulty    DifficultyLevel    @default(INTERMEDIATE)
  duration      Int? // Estimated hours to complete
  articles      KnowledgeArticle[] @relation("PathwayArticles")
  prerequisites KnowledgeArticle[] @relation("PathwayPrerequisites")
  order         Json // Article sequence and dependencies

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CommentStatus {
  ACTIVE
  HIDDEN
  DELETED
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  INSIGHTFUL
  CONFUSED
}

enum AnnotationType {
  NOTE
  QUESTION
  SUGGESTION
  CORRECTION
  REFERENCE
}

enum AnnotationVisibility {
  PRIVATE
  TEAM
  PUBLIC
}

enum AnnotationStatus {
  ACTIVE
  RESOLVED
  HIDDEN
}

enum ReviewResolution {
  APPROVED
  REJECTED
  NEEDS_CHANGES
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Contribution {
  id          String            @id @default(cuid())
  profileId   String
  type        ContributionType
  title       String
  description String?           @db.Text
  url         String?
  impact      String?           @db.Text
  date        DateTime
  visibility  ContentVisibility @default(PUBLIC)

  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([type])
}

model Education {
  id           String    @id @default(cuid())
  profileId    String
  institution  String
  degree       String?
  fieldOfStudy String?
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  description  String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Experience {
  id          String    @id @default(cuid())
  profileId   String
  company     String
  title       String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Certification {
  id           String    @id @default(cuid())
  profileId    String
  name         String
  issuer       String
  issueDate    DateTime
  expiryDate   DateTime?
  credentialId String?
  url          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

enum ProfileVisibility {
  PRIVATE
  CONNECTIONS
  TEAM
  WORKSPACE
  PUBLIC
}

enum ContactVisibility {
  PRIVATE
  CONNECTIONS
  TEAM
  WORKSPACE
  PUBLIC
}

enum ResumeVisibility {
  PRIVATE
  CONNECTIONS
  TEAM
  WORKSPACE
  PUBLIC
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ProfileTheme {
  SYSTEM
  LIGHT
  DARK
  CUSTOM
}

enum ProfileLayout {
  STANDARD
  COMPACT
  CREATIVE
  MINIMAL
  CUSTOM_GRID
  PORTFOLIO
  TIMELINE
}

enum AvatarStyle {
  CIRCLE
  SQUARE
  ROUNDED
  HEXAGON
}

enum AvailabilityStatus {
  AVAILABLE
  BUSY
  AWAY
  DO_NOT_DISTURB
  OFFLINE
}

enum AchievementType {
  AWARD
  CERTIFICATION
  PUBLICATION
  PATENT
  PRESENTATION
  OTHER
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum ArticleStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum ContentVisibility {
  PRIVATE
  TEAM
  ORGANIZATION
  PUBLIC
}

enum ComplexityLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  CHANGES_REQUESTED
}

enum ContributorRole {
  AUTHOR
  EDITOR
  REVIEWER
  TRANSLATOR
}

enum CollaboratorRole {
  ADMIN
  EDITOR
  CONTRIBUTOR
  VIEWER
}

enum ResourceType {
  DOCUMENT
  VIDEO
  AUDIO
  IMAGE
  CODE
  DATASET
  TEMPLATE
  OTHER
}

enum ContributionType {
  ARTICLE
  TUTORIAL
  CODE
  PRESENTATION
  RESEARCH
  MENTORSHIP
  COMMUNITY
  OTHER
}

enum ProfessionalEventType {
  CONFERENCE
  WEBINAR
  WORKSHOP
  PANEL
  KEYNOTE
  PODCAST
  INTERVIEW
}

enum ViewMode {
  STANDARD
  COMPACT
  EXPANDED
  PRESENTATION
}

enum AnimationLevel {
  NONE
  MINIMAL
  MODERATE
  FULL
}

enum CardStyle {
  CLASSIC
  MODERN
  MINIMAL
  CREATIVE
  PROFESSIONAL
}

enum ExpertiseLevel {
  NOVICE
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum MentorshipStatus {
  AVAILABLE
  BUSY
  ON_BREAK
  INACTIVE
}

enum EventType {
  CONFERENCE
  WEBINAR
  WORKSHOP
  PANEL
  KEYNOTE
  PODCAST
  INTERVIEW
}

enum SessionStatus {
  ACTIVE
  PAUSED
  ENDED
}

enum ParticipantRole {
  VIEWER
  EDITOR
  MODERATOR
}

enum OperationType {
  INSERT
  DELETE
  REPLACE
  FORMAT
  COMMENT
}

enum BlockType {
  TEXT
  CODE
  IMAGE
  VIDEO
  TABLE
  QUOTE
  EMBED
}

enum FlagType {
  ACCURACY
  CLARITY
  OUTDATED
  INCOMPLETE
  STYLE
  CITATION_NEEDED
}

enum FlagSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FlagStatus {
  OPEN
  IN_REVIEW
  RESOLVED
  WONTFIX
}
