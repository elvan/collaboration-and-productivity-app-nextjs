model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique // URL-friendly identifier
  ownerId     String
  settings    Json?    @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isArchived  Boolean  @default(false)
  logoUrl     String?
  theme       Json?    @default("{}")

  // Relations
  customFields CustomField[]

  folderTags               FolderTag[]
  folderTemplateCategories FolderTemplateCategory[]
  folderTemplates          FolderTemplate[]
  folders                  Folder[]

  owner User @relation("WorkspaceOwner", fields: [ownerId], references: [id])

  projectFolders ProjectFolder[]
  projects       Project[]

  teams Team[]

  workflows Workflow[]

  workspaceActivities WorkspaceActivity[]
  workspaceAnalytics  WorkspaceAnalytics?
  workspaceMembers    WorkspaceMember[]
  workspaceRoles      WorkspaceRole[]

  @@index([ownerId])
  @@index([slug])
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  roleId      String
  joinedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String    @default("active") // active, invited, suspended
  inviteToken String?   @unique
  expiresAt   DateTime? // For invite tokens

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  workspace     Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceRole WorkspaceRole @relation(fields: [roleId], references: [id])

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
  @@index([inviteToken])
}

model WorkspaceRole {
  id          String   @id @default(cuid())
  name        String
  workspaceId String
  permissions Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDefault   Boolean  @default(false)

  // Relations
  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  workspace        Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceMembers WorkspaceMember[]

  @@unique([workspaceId, name])
  @@index([workspaceId])
}

model WorkspaceAnalytics {
  id             String   @id @default(cuid())
  workspaceId    String   @unique
  activeUsers    Int      @default(0)
  taskCount      Int      @default(0)
  completedTasks Int      @default(0)
  documentCount  Int      @default(0)
  commentCount   Int      @default(0)
  storageUsed    BigInt   @default(0) // in bytes
  lastActiveDate DateTime @default(now())
  memberCount    Int      @default(0)
  projectCount   Int      @default(0)
  lastUpdated    DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
}

model WorkspaceActivity {
  id         String   @id @default(cuid())
  type       String // e.g., "create", "update", "delete", "move", "share"
  entityType String // e.g., "project", "folder", "tag", "template"
  entityId   String // ID of the affected entity
  entityName String // Name of the affected entity
  details    Json? // Additional details about the activity
  createdAt  DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  @@index([workspaceId])
  @@index([userId])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
}
